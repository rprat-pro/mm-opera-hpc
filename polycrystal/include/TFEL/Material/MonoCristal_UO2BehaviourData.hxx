/*!
* \file   TFEL/Material/MonoCristal_UO2BehaviourData.hxx
* \brief  this file implements the MonoCristal_UO2BehaviourData class.
*         File generated by tfel version 4.2.0-dev
* \author Luc Portelette / Thomas Helfer / Etienne Castelier
 */

#ifndef LIB_TFELMATERIAL_MONOCRISTAL_UO2_BEHAVIOUR_DATA_HXX
#define LIB_TFELMATERIAL_MONOCRISTAL_UO2_BEHAVIOUR_DATA_HXX

#include<limits>
#include<string>
#include<sstream>
#include<iostream>
#include<stdexcept>
#include<algorithm>

#include"TFEL/Raise.hxx"
#include"TFEL/PhysicalConstants.hxx"
#include"TFEL/Config/TFELConfig.hxx"
#include"TFEL/Config/TFELTypes.hxx"
#include"TFEL/TypeTraits/IsFundamentalNumericType.hxx"
#include"TFEL/TypeTraits/IsReal.hxx"
#include"TFEL/Math/General/Abs.hxx"
#include"TFEL/Math/General/IEEE754.hxx"
#include"TFEL/Math/Array/ViewsArrayIO.hxx"
#include"TFEL/Math/Array/fsarrayIO.hxx"
#include"TFEL/Math/Array/runtime_arrayIO.hxx"
#include"TFEL/Math/fsarray.hxx"
#include"TFEL/Math/runtime_array.hxx"
#include"TFEL/Math/tvector.hxx"
#include"TFEL/Math/Vector/tvectorIO.hxx"
#include"TFEL/Math/tmatrix.hxx"
#include"TFEL/Math/Matrix/tmatrixIO.hxx"
#include"TFEL/Math/stensor.hxx"
#include"TFEL/Math/Stensor/StensorConceptIO.hxx"
#include"TFEL/Math/st2tost2.hxx"
#include"TFEL/Math/ST2toST2/ST2toST2ConceptIO.hxx"
#include"TFEL/Math/tensor.hxx"
#include"TFEL/Math/Tensor/TensorConceptIO.hxx"
#include"TFEL/Math/t2tot2.hxx"
#include"TFEL/Math/T2toT2/T2toT2ConceptIO.hxx"
#include"TFEL/Math/t2tost2.hxx"
#include"TFEL/Math/T2toST2/T2toST2ConceptIO.hxx"
#include"TFEL/Math/st2tot2.hxx"
#include"TFEL/Math/ST2toT2/ST2toT2ConceptIO.hxx"
#include"TFEL/Math/ST2toST2/ConvertToTangentModuli.hxx"
#include"TFEL/Math/ST2toST2/ConvertSpatialModuliToKirchhoffJaumanRateModuli.hxx"
#include"TFEL/Material/FiniteStrainBehaviourTangentOperator.hxx"
#include"TFEL/Material/ModellingHypothesis.hxx"

#include"TFEL/Math/General/CubicRoots.hxx"
#include "TFEL/Material/MonoCristal_UO2SlipSystems.hxx"

#include"MFront/Castem/Castem.hxx"

namespace tfel::material{

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis hypothesis,typename,bool>
class MonoCristal_UO2BehaviourData;

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType,bool use_qt>
class MonoCristal_UO2IntegrationData;

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis hypothesis,typename NumericType>
std::ostream&
 operator <<(std::ostream&,const MonoCristal_UO2BehaviourData<hypothesis, NumericType,false>&);

//! \brief forward declaration
template<typename NumericType>
std::ostream&
 operator <<(std::ostream&,const MonoCristal_UO2BehaviourData<ModellingHypothesis::TRIDIMENSIONAL, NumericType, false>&);

template<typename NumericType>
class MonoCristal_UO2BehaviourData<ModellingHypothesis::TRIDIMENSIONAL, NumericType, false>
{

static constexpr ModellingHypothesis::Hypothesis hypothesis = ModellingHypothesis::TRIDIMENSIONAL;
static constexpr unsigned short N = ModellingHypothesisToSpaceDimension<hypothesis>::value;
static_assert(N==1||N==2||N==3);
static_assert(tfel::typetraits::IsFundamentalNumericType<NumericType>::cond);
static_assert(tfel::typetraits::IsReal<NumericType>::cond);

friend std::ostream& operator<< <>(std::ostream&,const MonoCristal_UO2BehaviourData&);

/* integration data is declared friend to access   driving variables at the beginning of the time step */
friend class MonoCristal_UO2IntegrationData<hypothesis, NumericType, false>;

static constexpr unsigned short TVectorSize = N;
using StensorDimeToSize = tfel::math::StensorDimeToSize<N>;
static constexpr unsigned short StensorSize = StensorDimeToSize::value;
using TensorDimeToSize = tfel::math::TensorDimeToSize<N>;
static constexpr unsigned short TensorSize = TensorDimeToSize::value;

using ushort =  unsigned short;
using Types = tfel::config::Types<N, NumericType, false>;
using Type = NumericType;
using numeric_type = typename Types::numeric_type;
using real = typename Types::real;
using time = typename Types::time;
using length = typename Types::length;
using frequency = typename Types::frequency;
using speed = typename Types::speed;
using stress = typename Types::stress;
using strain = typename Types::strain;
using strainrate = typename Types::strainrate;
using stressrate = typename Types::stressrate;
using temperature = typename Types::temperature;
using thermalexpansion = typename Types::thermalexpansion;
using thermalconductivity = typename Types::thermalconductivity;
using massdensity = typename Types::massdensity;
using energydensity = typename Types::energydensity;
using TVector = typename Types::TVector;
using DisplacementTVector = typename Types::DisplacementTVector;
using ForceTVector = typename Types::ForceTVector;
using HeatFlux = typename Types::HeatFlux;
using TemperatureGradient = typename Types::TemperatureGradient;
using Stensor = typename Types::Stensor;
using StressStensor = typename Types::StressStensor;
using StressRateStensor = typename Types::StressRateStensor;
using StrainStensor = typename Types::StrainStensor;
using StrainRateStensor = typename Types::StrainRateStensor;
using FrequencyStensor = typename Types::FrequencyStensor;
using Tensor = typename Types::Tensor;
using DeformationGradientTensor = typename Types::DeformationGradientTensor;
using DeformationGradientRateTensor = typename Types::DeformationGradientRateTensor;
using StressTensor = typename Types::StressTensor;
using StiffnessTensor = typename Types::StiffnessTensor;
using Stensor4 = typename Types::Stensor4;
using TangentOperator = FiniteStrainBehaviourTangentOperator<N,stress>;
using PhysicalConstants = tfel::PhysicalConstants<NumericType, false>;

protected:

//! stiffness tensor computed by the calling solver
StiffnessTensor D;
DeformationGradientTensor F0;

StressStensor sig;


tfel::math::fsarray<24, strain > g;
DeformationGradientTensor Fe;
temperature T;

public:

/*!
* \brief Default constructor
*/
MonoCristal_UO2BehaviourData()
{}

/*!
* \brief copy constructor
*/
MonoCristal_UO2BehaviourData(const MonoCristal_UO2BehaviourData& src)
: D(src.D),
F0(src.F0),
sig(src.sig),
g(src.g),
Fe(src.Fe),
T(src.T)
{}

/*
 * \brief constructor for the Castem interface
 * \param[in] CASTEMT_: temperature
 * \param[in] CASTEMmat: material properties
 * \param[in] CASTEMint_vars: state variables
 * \param[in] CASTEMext_vars: external std::ate variables
 */
MonoCristal_UO2BehaviourData(const NumericType* const CASTEMT_,const NumericType* const,
const NumericType* const CASTEMint_vars
,const NumericType* const)
: Fe(&CASTEMint_vars[24]),
T(*CASTEMT_)
{
g[0] = CASTEMint_vars[0];
g[1] = CASTEMint_vars[1];
g[2] = CASTEMint_vars[2];
g[3] = CASTEMint_vars[3];
g[4] = CASTEMint_vars[4];
g[5] = CASTEMint_vars[5];
g[6] = CASTEMint_vars[6];
g[7] = CASTEMint_vars[7];
g[8] = CASTEMint_vars[8];
g[9] = CASTEMint_vars[9];
g[10] = CASTEMint_vars[10];
g[11] = CASTEMint_vars[11];
g[12] = CASTEMint_vars[12];
g[13] = CASTEMint_vars[13];
g[14] = CASTEMint_vars[14];
g[15] = CASTEMint_vars[15];
g[16] = CASTEMint_vars[16];
g[17] = CASTEMint_vars[17];
g[18] = CASTEMint_vars[18];
g[19] = CASTEMint_vars[19];
g[20] = CASTEMint_vars[20];
g[21] = CASTEMint_vars[21];
g[22] = CASTEMint_vars[22];
g[23] = CASTEMint_vars[23];
}

void setCASTEMBehaviourDataGradients(const NumericType* const CASTEMstran)
{
DeformationGradientTensor::buildFromFortranMatrix(this->F0,CASTEMstran);
}

void setCASTEMBehaviourDataThermodynamicForces(const NumericType* const CASTEMstress_)
{
this->sig.importTab(CASTEMstress_);
}


StiffnessTensor& getStiffnessTensor()
{
return this->D;
}

const StiffnessTensor& getStiffnessTensor() const
{
return this->D;
}

/*
* \brief Assignement operator
*/
MonoCristal_UO2BehaviourData&
operator=(const MonoCristal_UO2BehaviourData& src){
this->F0 = src.F0;
this->sig = src.sig;
this->g = src.g;
this->Fe = src.Fe;
this->T = src.T;
return *this;
}

void
CASTEMexportStateData(NumericType * const CASTEMstress_, NumericType * const CASTEMstatev) const
{
using namespace tfel::math;
this->sig.exportTab(CASTEMstress_);
CASTEMstatev[0] = this->g[0];
CASTEMstatev[1] = this->g[1];
CASTEMstatev[2] = this->g[2];
CASTEMstatev[3] = this->g[3];
CASTEMstatev[4] = this->g[4];
CASTEMstatev[5] = this->g[5];
CASTEMstatev[6] = this->g[6];
CASTEMstatev[7] = this->g[7];
CASTEMstatev[8] = this->g[8];
CASTEMstatev[9] = this->g[9];
CASTEMstatev[10] = this->g[10];
CASTEMstatev[11] = this->g[11];
CASTEMstatev[12] = this->g[12];
CASTEMstatev[13] = this->g[13];
CASTEMstatev[14] = this->g[14];
CASTEMstatev[15] = this->g[15];
CASTEMstatev[16] = this->g[16];
CASTEMstatev[17] = this->g[17];
CASTEMstatev[18] = this->g[18];
CASTEMstatev[19] = this->g[19];
CASTEMstatev[20] = this->g[20];
CASTEMstatev[21] = this->g[21];
CASTEMstatev[22] = this->g[22];
CASTEMstatev[23] = this->g[23];
exportToBaseTypeArray(this->Fe,&CASTEMstatev[24]);
} // end of CASTEMexportStateData

}; // end of MonoCristal_UO2BehaviourDataclass

template<typename NumericType>
std::ostream&
operator <<(std::ostream& os,const MonoCristal_UO2BehaviourData<ModellingHypothesis::TRIDIMENSIONAL, NumericType, false>& b)
{
os << "F₀ : " << b.F0 << '\n';
os << "σ : " << b.sig << '\n';
os << "g : " << b.g << '\n';
os << "Fe : " << b.Fe << '\n';
os << "T : " << b.T << '\n';
return os;
}

} // end of namespace tfel::material

#endif /* LIB_TFELMATERIAL_MONOCRISTAL_UO2_BEHAVIOUR_DATA_HXX */
