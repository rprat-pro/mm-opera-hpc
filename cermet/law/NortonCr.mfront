@DSL       Implicit;
@Behaviour NortonCr;
@Author    Bruno Michel (simple Norton for Chromium material);
@Date      07/08/2025;
@Description{
  This file implements a Norton Law with thermally activated parameter:
 }

//@ModellingHypotheses {".+"};
//@Epsilon 1.e-16;
@Brick StandardElasticity;
@MaterialProperty stress young;           /* mandatory for castem */
young.setGlossaryName("YoungModulus");
@MaterialProperty real nu;                /* mandatory for castem */
nu.setGlossaryName("PoissonRatio");
@StateVariable strain p;
p.setGlossaryName("EquivalentViscoplasticStrain");
@LocalVariable stress mu;    /* elastic shear modulus */
@LocalVariable real A;
@LocalVariable real n1;
@LocalVariable real Q;
@LocalVariable real D0;
@LocalVariable real b;
@LocalVariable real R;
@LocalVariable real C;
@LocalVariable real D1;
@Theta 1.;

@InitLocalVariables{ 
/* Elastic shear modulus */
  mu = young/(2.*(1.+nu));
  A = 2.5e+11;
  n1 = 4.75;
  Q = 306.27e+03;
  D0 = 1.55e-5;
  b = 2.5e-10;
  R = 8.314;
  C = 264110 - 10*T - 0.025*T*T;
  D1 = D0*exp(-1.*Q/(R*T));
   
}

@StrainMeasure Hencky;

@Integrator{
  const real eps = 1.e-12;
  const auto seq = sigmaeq(sig);
  const auto tmp = A*D1*pow(1.e-06,n1)*pow(seq,n1-1)/(b*b*pow(C,n1));
  const auto df_dseq = n1*tmp;
  const auto iseq = 1/max(seq,eps*young);
  const Stensor n = 3*deviator(sig)*iseq/2;
  // implicit system
  feel += dp*n;
  fp   -= tmp*seq*dt;
//  cout<<" seqMPa "<<seqMPa<<" tmp "<<tmp<<" dp "<<dp<<" fp "<<fp<<endl;

  // jacobian
  dfeel_ddeel += 2.*mu*theta*dp*iseq*(Stensor4::M()-(n^n));
  dfeel_ddp    = n;
  dfp_ddeel    = -2*mu*theta*df_dseq*dt*n;
} // end of @Integrator
